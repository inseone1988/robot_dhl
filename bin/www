#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dhl-document-generated:server');
var http = require('http');
const https = require("https")
const socket = require("../utils/socket");
const fs = require("fs");

/**
 * SSL Certificate configuration
 */

// const privateKey = fs.readFileSync('/etc/letsencrypt/live/logiemb.com/privkey.pem', 'utf8');
// const certificate = fs.readFileSync('/etc/letsencrypt/live/logiemb.com/cert.pem', 'utf8');
// const ca = fs.readFileSync('/etc/letsencrypt/live/logiemb.com/chain.pem', 'utf8');

// const credentials = {
//   key: privateKey,
//   cert: certificate,
//   ca: ca
// };

const {onGenerateRequest} = require("../controllers/mydhlgenerate");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5001');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);
var server = http.createServer(app);
// var server = https.createServer(credentials,app);

const Socket = socket.initSocket(server);
const handler = require("../controllers/callrequesthandler").handler;
const sequelize = require("../config/sequelize").envios;
const broadcaster = require("../classes/broadcaster");
broadcaster.sockets = Socket.sockets;

Socket.sockets.on("connection",(socket)=>{
  handler(socket);
  socket.on("enviarDatos2",(data)=>{
    try{
      onGenerateRequest(data,socket);
    }catch (e) {
      console.log(e);
      socket.emit("enviarMensaje",{
        message : e,
        evento : "salir",
        porc : 15
      });
    }
  });
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
